<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Something Binary</title>
  <subtitle>Here Today. Gone Tommorrow.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fredxue.com/"/>
  <updated>2016-03-10T13:27:37.638Z</updated>
  <id>http://fredxue.com/</id>
  
  <author>
    <name>Fred Xue</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Browser Events Model</title>
    <link href="http://fredxue.com/2016/03/10/Event/"/>
    <id>http://fredxue.com/2016/03/10/Event/</id>
    <published>2016-03-10T13:18:44.000Z</published>
    <updated>2016-03-10T13:27:37.638Z</updated>
    
    <content type="html">&lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;A Brief Introduction to Browser Events Model&lt;/blockquote&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Events-type&quot;&gt;&lt;a href=&quot;#Events-type&quot; class=&quot;headerlink&quot; title=&quot;Events type&quot;&gt;&lt;/a&gt;Events type&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Common/W3C events: Mouse, Keyboard, HTML frame, HTML form&lt;/li&gt;
&lt;li&gt;Touch events&lt;/li&gt;
&lt;li&gt;Pointer Events&lt;br&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Event-Flow&quot;&gt;&lt;a href=&quot;#Event-Flow&quot; class=&quot;headerlink&quot; title=&quot;Event Flow&quot;&gt;&lt;/a&gt;Event Flow&lt;/h2&gt;&lt;p&gt;Consider the situation when there are 2 elements nested together. Both have event handlers registered on the same event type, say “click”. When the user clicks on the inner element, there are two possible ways to handle it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Trigger the elements from outer to inner (event capturing). This model is implemented in Netscape Navigator.&lt;/li&gt;
&lt;li&gt;Trigger the elements from inner to outer (event bubbling). This model is implemented in Internet Explorer and other browsers.[13]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;W3C takes a middle position in this struggle. Events are first captured until it reaches the target element, and then bubbled up. During the event flow, an event can be responded to at any element in the path (an observer) in either phase by causing an action, and/or by stopping the event (with method event.stopPropagation() for W3C-conforming browsers and command event.cancelBubble = true for Internet Explorer), and/or by cancelling the default action for the event.&lt;/p&gt;
&lt;h2 id=&quot;Event-Object&quot;&gt;&lt;a href=&quot;#Event-Object&quot; class=&quot;headerlink&quot; title=&quot;Event Object&quot;&gt;&lt;/a&gt;Event Object&lt;/h2&gt;&lt;p&gt;The Event object provides a lot of information about a particular event, including information about target element, key pressed, mouse button pressed, mouse position, etc. Unfortunately, there are very serious browser incompatibilities in this area.&lt;/p&gt;
&lt;h2 id=&quot;Event-handling-models&quot;&gt;&lt;a href=&quot;#Event-handling-models&quot; class=&quot;headerlink&quot; title=&quot;Event handling models&quot;&gt;&lt;/a&gt;Event handling models&lt;/h2&gt;&lt;p&gt;Events and event handling become central to web programming with the addition of the language to browsers, accompanying a switch in the rendering architecture of browsers from fetch and load page rendering to event driven, reflow based, page rendering. Initially, browsers wait, until they receive all of the resources associated with a page, to parse, process, draw, and present the page to the user. The displayed page remains unchanged until the browser requests a new page. With the change to dynamic page rendering, browsers loop continuously between processing, drawing, presenting content, and waiting for some new event trigger. Event triggers include the completion of the loading of a resource on the network e.g., downloads an image that can now be drawn on the screen, the completion of parsing a resource by the browser e.g., processes the HTML content of a page, the interaction of a user with the contents of the page e.g., clicks a button. &lt;/p&gt;
&lt;h3 id=&quot;Design-Pattern&quot;&gt;&lt;a href=&quot;#Design-Pattern&quot; class=&quot;headerlink&quot; title=&quot;Design Pattern&quot;&gt;&lt;/a&gt;Design Pattern&lt;/h3&gt;&lt;p&gt;The event system, at its core, is simply a programming design pattern. The pattern starts with an agreement over a kind of event and:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the name String used for the event,&lt;/li&gt;
&lt;li&gt;the type of the data structure used to represent the key properties of that event, and&lt;/li&gt;
&lt;li&gt;the JavaScript object which will ‘emit’ that event.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The pattern is implemented by&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;defining a JavaScript function which takes as an argument the data structure which was agreed upon, and&lt;/li&gt;
&lt;li&gt;registering the function using the name String with the object which will emit the event.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;DOM-Level-0&quot;&gt;&lt;a href=&quot;#DOM-Level-0&quot; class=&quot;headerlink&quot; title=&quot;DOM Level 0&quot;&gt;&lt;/a&gt;DOM Level 0&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;inline model:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#60;a href=&amp;#34;http://www.example.com&amp;#34; onclick=&amp;#34;triggerAlert(&amp;#39;Joe&amp;#39;); return false;&amp;#34;&amp;#62;Joe&amp;#60;/a&amp;#62;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;traditional model:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;      var triggerAlert = function () &amp;#123;&amp;#10;&amp;#9;window.alert(&amp;#34;Hey Joe&amp;#34;);&amp;#10;&amp;#125;;&amp;#10;&amp;#10;// Assign an event handler&amp;#10;document.onclick = triggerAlert;&amp;#10;&amp;#10;// Assign another event handler&amp;#10;window.onload = triggerAlert;&amp;#10;&amp;#10;// Remove the event handler that was just assigned&amp;#10;window.onload = null;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;DOM-Level-2&quot;&gt;&lt;a href=&quot;#DOM-Level-2&quot; class=&quot;headerlink&quot; title=&quot;DOM Level 2&quot;&gt;&lt;/a&gt;DOM Level 2&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//Allows the registration of event listeners on the event target.&amp;#10;addEventListener(DOMString type, EventListener listener, boolean useCapture)&amp;#123;&amp;#125;;&amp;#10;&amp;#10;//Allows the removal of event listeners from the event target.&amp;#10;removeEventListener(DOMString type, EventListener listener, boolean useCapture)&amp;#123;&amp;#125;;&amp;#10;&amp;#10;//Allows sending the event to the subscribed event listeners.&amp;#10;disPatchEvent(Event evt)&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Some useful things to know :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To prevent an event from bubbling, developers must call the “stopPropagation()” method of the event object.&lt;/li&gt;
&lt;li&gt;To prevent the default action of the event to be called, developers must call the “preventDefault” method of the event object.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;The main difference from the traditional model is that multiple event handlers can be registered for the same event.&lt;/em&gt;&lt;/strong&gt;  The useCapture option can also be used to specify that the handler should be called in the capture phase instead of the bubbling phase. This model is supported by Mozilla, Opera, Safari, Chrome and Konqueror.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;IE soecific model omitted in this article. You can see &lt;a href=&quot;https://en.wikipedia.org/wiki/DOM_events#DOM_Level_0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Create-Custom-Event&quot;&gt;&lt;a href=&quot;#Create-Custom-Event&quot; class=&quot;headerlink&quot; title=&quot;Create Custom Event&quot;&gt;&lt;/a&gt;Create Custom Event&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;h3 id=&quot;Step-1-Create-a-new-Event-object&quot;&gt;&lt;a href=&quot;#Step-1-Create-a-new-Event-object&quot; class=&quot;headerlink&quot; title=&quot;Step 1: Create a new Event object&quot;&gt;&lt;/a&gt;Step 1: Create a new Event object&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var event = new CustomEvent(&amp;#10;&amp;#9;&amp;#34;newMessage&amp;#34;, &amp;#10;&amp;#9;&amp;#123;&amp;#10;&amp;#9;&amp;#9;detail: &amp;#123;&amp;#10;&amp;#9;&amp;#9;&amp;#9;message: &amp;#34;Hello World!&amp;#34;,&amp;#10;&amp;#9;&amp;#9;&amp;#9;time: new Date(),&amp;#10;&amp;#9;&amp;#9;&amp;#125;,&amp;#10;&amp;#9;&amp;#9;bubbles: true,&amp;#10;&amp;#9;&amp;#9;cancelable: true&amp;#10;&amp;#9;&amp;#125;&amp;#10;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; The second parameter is an object with three properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;detail: a child object providing custom information about the event. In this example, we’ve added a message and time.&lt;/li&gt;
&lt;li&gt;bubbles: if true, events will bubble to ancestors of the element which fired the event.&lt;/li&gt;
&lt;li&gt;cancelable: if true, events can be canceled using the event object’s stopPropagation() method.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&quot;Step-2-Dispatch-this-event-on-a-specific-element&quot;&gt;&lt;a href=&quot;#Step-2-Dispatch-this-event-on-a-specific-element&quot; class=&quot;headerlink&quot; title=&quot;Step 2: Dispatch this event on a specific element&quot;&gt;&lt;/a&gt;Step 2: Dispatch this event on a specific element&lt;/h3&gt; &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;document.getElementById(&amp;#34;msgbox&amp;#34;).dispatchEvent(event);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&quot;Step-3-Any-number-of-handlers-can-subscribe-to-this-event&quot;&gt;&lt;a href=&quot;#Step-3-Any-number-of-handlers-can-subscribe-to-this-event&quot; class=&quot;headerlink&quot; title=&quot;Step 3: Any number of handlers can subscribe to this event&quot;&gt;&lt;/a&gt;Step 3: Any number of handlers can subscribe to this event&lt;/h3&gt; &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;document.addEventListener(&amp;#34;newMessage&amp;#34;, newMessageHandler, false);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;A Brief Introduction to Browser Events Model&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
      <category term="binary" scheme="http://fredxue.com/categories/binary/"/>
    
    
      <category term="events" scheme="http://fredxue.com/tags/events/"/>
    
      <category term="js" scheme="http://fredxue.com/tags/js/"/>
    
      <category term="web" scheme="http://fredxue.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>2015下半年读书总结</title>
    <link href="http://fredxue.com/2016/03/07/reading2015/"/>
    <id>http://fredxue.com/2016/03/07/reading2015/</id>
    <published>2016-03-07T05:44:13.000Z</published>
    <updated>2016-03-07T05:53:39.076Z</updated>
    
    <content type="html">&lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt; 读书便是体验千姿百态的生活。 &lt;/blockquote&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;《南大读本》-自然科学卷&quot;&gt;&lt;a href=&quot;#《南大读本》-自然科学卷&quot; class=&quot;headerlink&quot; title=&quot;《南大读本》 自然科学卷&quot;&gt;&lt;/a&gt;《南大读本》 自然科学卷&lt;/h1&gt;&lt;p&gt;这是学校出的一本通识教育的读本，序言是陈俊校长写的，题目是与伟大的书籍相遇，全文字字诚恳，有校长自己对读书的独到见解。校长写道，“读书是一种对话，通过语言媒介，我们能够跨越广袤的时空距离，去和作者对话，去和世界对话、和自己的内心对话”，不禁心有戚戚。虽然在校期间没有静心全力以赴地学习，如今到了工作岗位才知书到用时方恨少的道理，才越发抓紧地读书和学习。序言中说这套读本旨在帮助同学越出自己的专业藩篱，进入一个更加丰富多彩的阅读空间，读完书中大部分的文章的我觉得确实大有裨益。&lt;/p&gt;
&lt;p&gt;好书自有一种召唤力！&lt;/p&gt;
&lt;p&gt;总的来说，经济与社会，自然与生命，全球化与领导力三章中的选文以及编排和选文都对外行人很友好，基本上专注读来没有什么不能理解或晦涩的语言。 至于读者对哪些方面的文章感兴趣就因人而异了。 前几篇经济基础的文章让我这个门外汉窥得一些门道，后几篇关于社会科学和中国社会的文章不仅仅让人读的时候不断啧啧称道，也让人遇到了不少经典的伟大的书和作者，比如费孝通的《乡土中国》选文对中国社会行为和社会心理的描述简直精到，又比如《白领，美国的中产阶级》选文中对美国中产的生存状态和各种行为的心理分析和形成原因给出了深入的剖析，书中一些行为更是同平常生活中的我们如出一辙，就像是在写自己！这样读完一篇短短的选文怎么过瘾！当然在网上去购买了一些很喜欢，读来很有滋味的书买了下来，作为明年的阅读计划。&lt;/p&gt;
&lt;h1 id=&quot;《菜根谭》-–-洪自诚&quot;&gt;&lt;a href=&quot;#《菜根谭》-–-洪自诚&quot; class=&quot;headerlink&quot; title=&quot;《菜根谭》 – 洪自诚&quot;&gt;&lt;/a&gt;《菜根谭》 – 洪自诚&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;人情世态，倏忽万端，不宜认得太认真。 尧夫支：“昔日所云我，今稍却是伊，不知今日我，又属后来谁？”&lt;/p&gt;
&lt;p&gt;不可乘喜而轻诺，不可因醉而生嗔，不可乘快而多事，不可因倦而鲜终。&lt;/p&gt;
&lt;p&gt;持身不可太皎洁，一切污辱垢秽要茹纳的；与人不可太分明，一切善恶贤愚要包容的。&lt;/p&gt;
&lt;p&gt;炎凉之态，富贵更甚于贫贱；妒忌之心，骨肉尤狠于外人。&lt;/p&gt;
&lt;p&gt;家人有过不宜暴扬，不宜轻弃。&lt;/p&gt;
&lt;p&gt;红烛烧残，万念自然厌冷；黄粱梦破，一身亦似云浮。&lt;/p&gt;
&lt;p&gt;千载奇逢，无如好书良友；一生清福，只在碗茗炉烟。&lt;/p&gt;
&lt;p&gt;人生只为欲字所累，便如马如牛，听人羁络；为鹰为犬，任物鞭笞。&lt;/p&gt;
&lt;p&gt;大聪明的人，小事必朦胧；大懵懂的人，小事必伺察。&lt;/p&gt;
&lt;p&gt;如韩信以勇备震主被擒，陆机以才名冠世见杀，霍光败于权势逼君，石崇死于财赋敌国，皆以十分取败者也。 &lt;/p&gt;
&lt;p&gt;荣与辱共蒂，厌辱何须求荣；生与死同根，贪生不必畏死。&lt;/p&gt;
&lt;p&gt;从热闹场中出几句清冷言语，便扫除无限杀机；像寒微路上用一点赤热心肠，自培植许多生意&lt;/p&gt;
&lt;p&gt;思入世而有为者，须先领得世外风光，否则无以脱垢浊之尘缘；思出世而无染着，须先谙尽世中滋味。&lt;/p&gt;
&lt;p&gt;善启迪人心者，当因其所明而渐通之，毋强开其所闭；善移风化者，当因其所易而渐及之，毋轻矫其所难&lt;/p&gt;
&lt;p&gt;好丑心太明，则物不契；贤愚心太明，则人不亲。士君子须是内精明而外浑厚，使好丑两得其平，贤愚共受其益，才是生成的德量。&lt;/p&gt;
&lt;p&gt;以积财之心之心积学问，以求功名之念求道德，以爱妻之心爱父母，以保爵位之策保国家，出此入彼，念虑只差毫末。而超凡入圣，人品且判星渊矣。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;《The-Great-Gatsby》-—-F-Scott-Fitzgerald&quot;&gt;&lt;a href=&quot;#《The-Great-Gatsby》-—-F-Scott-Fitzgerald&quot; class=&quot;headerlink&quot; title=&quot;《The Great Gatsby》 — F.Scott Fitzgerald&quot;&gt;&lt;/a&gt;《The Great Gatsby》 — F.Scott Fitzgerald&lt;/h1&gt;&lt;p&gt;Gatsby believed in the green light, the orgastic future that year by year recedes before us. It eluded us then, but that’s no matter tomorrow we will run faster, stretch out our arms faster…  And one fine morning&lt;br&gt;So we beat on, boats against the current, borne back ceaselessly into the past.&lt;/p&gt;
&lt;p&gt;现实生活中我常奉行对事不对人的准则，但是读小说若是不对人恐怕不如不读。 说实话，读起英文原著是很吃力的，一些环境和细节描写实在无法看懂，当然让阅读体验失色大半。但整个故事和人物的大体形象读下来还是可以掌握的，就像拍X光，只能看到人的骨架，看不清肉。整部小说只有在结尾部分读得时候有些共鸣，似乎走进了一点一个世纪前的长岛，似乎看到了盖茨比魂牵梦绕的对岸的绿光，似乎在脑海中勾画起了一个悲剧的人生起伏。&lt;br&gt;爱情游戏中若不能真正了解对方真正了解自己只能成为输家，如果觉得自己玩不起还是早点退出的好。 显然盖茨比一直看不透daisy，被心中那团虚无缥缈的情感拎着到处跑，最终成了牺牲品。&lt;br&gt;最终人们要过的是精神生活还是物质生活？上层社会是绝不会仅有二者其一的，只有能够做到兼顾的人才是大家&lt;br&gt;小说的结尾最令我感慨，最后一句话更是打动人心，我们奋力前行，逆水行舟，不断被推回到过去。一个美好，坚定，纯真，充满力量和激情的过去。&lt;/p&gt;
&lt;h1 id=&quot;《黑客与画家-》–-Paul-Graham&quot;&gt;&lt;a href=&quot;#《黑客与画家-》–-Paul-Graham&quot; class=&quot;headerlink&quot; title=&quot;《黑客与画家 》– Paul Graham&quot;&gt;&lt;/a&gt;《黑客与画家 》– Paul Graham&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;编程语言的首要特性应该是允许动态扩展，&lt;/p&gt;
&lt;p&gt;编程语言是用来帮助思考程序的，而不是用来表达你已经想好的程序，它应该是一支铅笔，而不是一支钢笔。&lt;/p&gt;
&lt;p&gt;创作者一个学习的途径是通过范例，临摹大师作品。（确实，对于菜鸟来说白手起家写出一个美丽的作品难度很大，在初期模仿优秀的软件作品是一个很好的学习方式。）&lt;/p&gt;
&lt;p&gt;一个优秀的工程师应该讲心理周期考虑在内，有的时候你愿意连续工作16个小时，而有的时候你什么都不想做。厌倦的时候再去做一些容易的工作。&lt;br&gt;（管理好自己的心理周期）&lt;/p&gt;
&lt;p&gt;黑客必须像画家一样，时刻考虑到用户的人性需要，这样才能做出伟大的产品，你必须能够站在用户的角度思考问题。这意味着你要做其他人需要的事情，而不是你自己想做的事情。学会向没有技术背景的人解释技术问题。;&lt;/p&gt;
&lt;p&gt;源代码应该可以自己解释自己。&lt;/p&gt;
&lt;p&gt;不仅要展示一些当前的异端邪说，让每个人都大吃一惊，还要找出使用与所有年代的通用法则。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;工作是什么？ &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;公司一切行为都是为盈利。 公司的内部工作与许多人一起完成，你是为了满足顾客的某种需求而工作。&lt;/p&gt;
&lt;p&gt;通过创造有价值的东西而致富，这种方法的优势不仅仅在于它是合法的，还在于它更简单。&lt;/p&gt;
&lt;p&gt;并非所有痛苦都是有益的。世界上有有益的痛苦，也有无益的痛苦。你需要的是咬牙向前冲的痛苦，而不是脚被钉子扎破的痛苦。&lt;/p&gt;
&lt;p&gt;推动人才成批涌现的最大因素就是，让有天赋的人聚在一起，共同解决某个难题。互相激励比天赋更重要，达芬奇之所以成为达芬奇，主要原因不仅仅是他的天赋，更重要的是他生活在当时的佛罗伦萨，而不是米兰。（和优秀的人为伍）&lt;/p&gt;
&lt;p&gt;新技术被市场接纳的方式有两种，一种是自然成长式，另一种是大爆炸式&lt;/p&gt;
&lt;p&gt;如果你正在写的代码一个小时之后就可以看到运行结果，这好比让你看到不远处就是唾手可得的奖励，你因此会受到激励和鼓舞。&lt;/p&gt;
&lt;p&gt;画作永远没有完工的一天，你只是不在画下去而已。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;后感：&lt;br&gt;读《黑客与画家》的时候我正在求职，正是对行业和业界初次探索的时间点，书中一些观点和方法论让我收获良多。阅读这本书前后有些断断续续，文章章节之间似乎也没有太多关联，每个章节都是从不同的角度来解读互联网行业，后面几章也变成了对LISP语言的推崇。摘抄了一些觉得很好的观点，其实不必句句去分析，偶尔拿出来看看，不同的时间不同的环境会有不同的收获&lt;/p&gt;
&lt;h1 id=&quot;15年阅读回顾&quot;&gt;&lt;a href=&quot;#15年阅读回顾&quot; class=&quot;headerlink&quot; title=&quot;15年阅读回顾&quot;&gt;&lt;/a&gt;15年阅读回顾&lt;/h1&gt;&lt;p&gt;除了上面列出来的一些摘抄或是写了短短的后感的书，还看了一些琐碎的书，不成体系，《算法导论》《JS语言精粹》《把时间当做朋友》等等。没看完的还有《乔布斯传》。&lt;/p&gt;
&lt;p&gt;总的来说，看的书比较零碎，经典看得不多，书都偏向于应用或是现实，可能跟我急功近利的心境有关。为什么要读经典，脑海里突然想起这个问题，似乎有一本书就叫这个名字。是不是考虑要多一些经典的，经过时间打磨锤炼和证明的优秀的书籍和文字，太执着于现实或太执着于理想都可能会竹篮打水一场空。今年看书应该有些章法，多度一些经典大家之作为好，可以同主题同系列的连着看，好有比较和认知。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt; 读书便是体验千姿百态的生活。 &lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Reading" scheme="http://fredxue.com/categories/Reading/"/>
    
    
      <category term="Wrong thing with books" scheme="http://fredxue.com/tags/Wrong-thing-with-books/"/>
    
  </entry>
  
</feed>
